package com.tschuchort.compiletesting

import java.io.File
import javax.annotation.processing.Processor

class KaptModel(
    private val compilationModel: JvmCompilationModel
) {
    /** Arbitrary arguments to be passed to kapt */
    var args = mutableMapOf<OptionName, OptionValue>()
    /** Make kapt correct error types */
    var correctErrorTypes: Boolean = false
    /** Annotation processors to be passed to kapt */
    var annotationProcessors: List<Processor> = emptyList()
    // Base directory for kapt stuff
    val baseDir get() = compilationModel.workingDir.resolve("kapt")

    // Java annotation processors that are compile by kapt will put their generated files here
    val sourceDir get() = baseDir.resolve("sources")

    // Output directory for Kotlin source files generated by kapt
    val kotlinGeneratedDir get() = args[KotlinCompilation.OPTION_KAPT_KOTLIN_GENERATED]
        ?.let { path ->
            require(File(path).isDirectory) { "${KotlinCompilation.OPTION_KAPT_KOTLIN_GENERATED} must be a directory" }
            File(path)
        }
        ?: File(baseDir, "kotlinGenerated")

    val stubsDir get() = baseDir.resolve("stubs")
    val incrementalDataDir get() = baseDir.resolve("incrementalData")
}