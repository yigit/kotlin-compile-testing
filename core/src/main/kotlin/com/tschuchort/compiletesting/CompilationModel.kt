package com.tschuchort.compiletesting

import org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor
import org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar
import java.io.File
import java.io.OutputStream
import kotlin.reflect.KClass

interface CompilationModel {
    /**
     * A holder to stash data for compilation steps
     */
    val extensionData: Map<KClass<*>, Any>

    /** Working directory for the compilation */
    var workingDir: File

    /**
     * Paths to directories or .jar files that contain classes
     * to be made available in the compilation (i.e. added to
     * the classpath)
     */
    var classpaths: List<File>

    /**
     * Paths to plugins to be made available in the compilation
     */
    var pluginClasspaths: List<File>

    /**
     * Compiler plugins that should be added to the compilation
     */
    var compilerPlugins: List<ComponentRegistrar>

    /**
     * Commandline processors for compiler plugins that should be added to the compilation
     */
    var commandLineProcessors: List<CommandLineProcessor>

    /** Source files to be compiled */
    var sources: List<SourceFile>

    /** Print verbose logging info */
    var verbose: Boolean

    /**
     * Helpful information (if [verbose] = true) and the compiler
     * system output will be written to this stream
     */
    var messageOutputStream: OutputStream

    /** Inherit classpath from calling process */
    var inheritClassPath: Boolean

    /** Suppress all warnings */
    var suppressWarnings: Boolean

    /** All warnings should be treated as errors */
    var allWarningsAsErrors: Boolean

    /** Report locations of files generated by the compiler */
    var reportOutputFiles: Boolean

    /** Report on performance of the compilation */
    var reportPerformance: Boolean

    /** Additional string arguments to the Kotlin compiler */
    var kotlincArguments: List<String>

    /** Options to be passed to compiler plugins: -P plugin:<pluginId>:<optionName>=<value>*/
    var pluginOptions: List<PluginOption>

    /**
     * Path to the kotlin-stdlib-common.jar
     * If none is given, it will be searched for in the host
     * process' classpaths
     */
    var kotlinStdLibCommonJar: File?
    val hostClasspaths: List<File>

    // Directory for input source files
    val sourcesDir: File

    /** Tries to find a file matching the given [regex] in the host process' classpath */
    fun findInHostClasspath(hostClasspaths: List<File>, simpleName: String, regex: Regex): File?

    /** Returns the files on the classloader's classpath and modulepath */
    fun resolveHostClasspaths(): List<File>
    fun log(s: String)
    fun warn(s: String)
    fun error(s: String)
    fun <T : Any> getExtensionData(key: KClass<T>): T?
    fun <T : Any> getOrPutExtensionData(key: KClass<T>, create: () -> T): T
}