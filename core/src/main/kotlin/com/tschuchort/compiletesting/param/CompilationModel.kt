package com.tschuchort.compiletesting.param

import com.tschuchort.compiletesting.PluginOption
import com.tschuchort.compiletesting.SourceFile
import org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor
import org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar
import java.io.File
import kotlin.reflect.KClass

interface CompilationModel {
    fun <T: Any> getExtensionData(key: KClass<T>): T?

    fun <T: Any> putExtensionData(key: KClass<T>, value: T)

    fun <T: Any> getOrPutExtensionData(key: KClass<T>, build : () -> T) : T {
        return getExtensionData(key) ?: build().also {
            putExtensionData(key, it)
        }
    }

    /**
     * Paths to directories or .jar files that contain classes
     * to be made available in the compilation (i.e. added to
     * the classpath)
     */
    val classpaths: List<File>
    /**
     * Paths to plugins to be made available in the compilation
     */
    val pluginClasspaths: List<File>

    /**
     * Compiler plugins that should be added to the compilation
     */
    val compilerPlugins: List<ComponentRegistrar>

    /**
     * Commandline processors for compiler plugins that should be added to the compilation
     */
    val commandLineProcessors: List<CommandLineProcessor>

    /** Source files to be compiled */
    val sources: List<SourceFile>

    /** Inherit classpath from calling process */
    val inheritClassPath: Boolean

    /** Suppress all warnings */
    val suppressWarnings: Boolean

    /** All warnings should be treated as errors */
    val allWarningsAsErrors: Boolean

    /** Report locations of files generated by the compiler */
    val reportOutputFiles: Boolean

    /** Report on performance of the compilation */
    val reportPerformance: Boolean


    /** Additional string arguments to the Kotlin compiler */
    val kotlincArguments: List<String>

    /** Options to be passed to compiler plugins: -P plugin:<pluginId>:<optionName>=<value>*/
    val pluginOptions: List<PluginOption>

    /**
     * Path to the kotlin-stdlib-common.jar
     * If none is given, it will be searched for in the host
     * process' classpaths
     */
    val kotlinStdLibCommonJar: File?

    /** Working directory for the compilation */
    val workingDir: File

    val verbose: Boolean
}