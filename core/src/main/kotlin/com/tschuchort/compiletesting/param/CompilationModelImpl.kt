package com.tschuchort.compiletesting.param

import com.tschuchort.compiletesting.*
import com.tschuchort.compiletesting.default
import org.jetbrains.kotlin.compiler.plugin.CommandLineProcessor
import org.jetbrains.kotlin.compiler.plugin.ComponentRegistrar
import java.io.File
import java.nio.file.Files
import kotlin.reflect.KClass

internal abstract class CompilationModelImpl : CompilationModel {
    internal val messageStream = MessageStream()
    internal val environment = CompilationEnvironment(messageStream)


    private val extensionData = mutableMapOf<KClass<*>, Any>()
    override fun <T : Any> getExtensionData(key: KClass<T>): T? {
        return extensionData[key] as? T
    }

    override fun <T : Any> putExtensionData(key: KClass<T>, value: T) {
        extensionData[key] = value
    }

    /** Working directory for the compilation */
    override var workingDir: File by default {
        val path = Files.createTempDirectory("Kotlin-Compilation")
        messageStream.log("Created temporary working directory at ${path.toAbsolutePath()}")
        return@default path.toFile()
    }

    /**
     * Paths to directories or .jar files that contain classes
     * to be made available in the compilation (i.e. added to
     * the classpath)
     */
    override var classpaths: List<File> = emptyList()

    /**
     * Paths to plugins to be made available in the compilation
     */
    override var pluginClasspaths: List<File> = emptyList()

    /**
     * Compiler plugins that should be added to the compilation
     */
    override var compilerPlugins: List<ComponentRegistrar> = emptyList()

    /**
     * Commandline processors for compiler plugins that should be added to the compilation
     */
    override var commandLineProcessors: List<CommandLineProcessor> = emptyList()

    /** Source files to be compiled */
    override var sources: List<SourceFile> = emptyList()

    /** Print verbose logging info */
    override var verbose: Boolean
        set(value) {
            messageStream.verbose = value
        }
        get() = messageStream.verbose

    /** Inherit classpath from calling process */
    override var inheritClassPath: Boolean = false

    /** Suppress all warnings */
    override var suppressWarnings: Boolean = false

    /** All warnings should be treated as errors */
    override var allWarningsAsErrors: Boolean = false

    /** Report locations of files generated by the compiler */
    override var reportOutputFiles: Boolean by default { verbose }

    /** Report on performance of the compilation */
    override var reportPerformance: Boolean = false

    /** Additional string arguments to the Kotlin compiler */
    override var kotlincArguments: List<String> = emptyList()

    /** Options to be passed to compiler plugins: -P plugin:<pluginId>:<optionName>=<value>*/
    override var pluginOptions: List<PluginOption> = emptyList()

    /**
     * Path to the kotlin-stdlib-common.jar
     * If none is given, it will be searched for in the host
     * process' classpaths
     */
    override var kotlinStdLibCommonJar: File? by default {
        environment.findInHostClasspath("kotlin-stdlib-common.jar",
            kotlinDependencyRegex("kotlin-stdlib-common"))
    }
}